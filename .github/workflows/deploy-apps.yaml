name: Deploy Applications
on:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - '.github/workflows/deploy-apps.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      application:
        description: 'Application to deploy (empty for all)'
        required: false
        default: ''

jobs:
  deploy:
    name: Deploy Applications
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    env:
      ENV: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: "4.5.7"
      
      - name: Setup Kubeconfig
        run: |
          # Create temporary kubeconfig file
          TEMP_KUBECONFIG=$(mktemp)
          echo "${{ secrets[format('KUBECONFIG_{0}', env.ENV)] }}" | base64 -d > "${TEMP_KUBECONFIG}"
          chmod 600 "${TEMP_KUBECONFIG}"
          
          # Set KUBECONFIG environment variable to the temporary file
          echo "KUBECONFIG=${TEMP_KUBECONFIG}" >> $GITHUB_ENV
          
          # Verify kubeconfig
          if ! kubectl config get-contexts; then
            echo "::error::Failed to get kubectl contexts. Check KUBECONFIG_${ENV} secret."
            exit 1
          fi
          
          # Show which context we're using
          CURRENT_CONTEXT=$(kubectl config current-context)
          echo "Using Kubernetes context: $CURRENT_CONTEXT"
          
          # Test API server connectivity
          echo "Testing API server connectivity..."
          if ! kubectl cluster-info; then
            echo "::warning::Cannot connect to Kubernetes API server directly. All kubectl commands will use --validate=false."
          fi

      - name: Deploy Applications
        run: |
          APP="${{ github.event.inputs.application }}"
          FAILED_APPS=""
          
          # Function to deploy a single app
          deploy_app() {
            local app=$1
            local env=$2
            
            echo "============================================="
            echo "Deploying $app to $env environment"
            echo "============================================="
            
            # Check if overlay exists
            if [ ! -d "apps/$app/overlays/$env" ]; then
              echo "::error::Overlay not found: apps/$app/overlays/$env"
              return 1
            fi
            
            # Create namespace if it doesn't exist
            echo "Creating namespace $app-$env if needed..."
            kubectl create namespace $app-$env --dry-run=client -o yaml | kubectl apply --validate=false -f -
            
            # Apply Kustomize overlay
            echo "Applying Kustomize overlay..."
            if ! kubectl apply --validate=false -k apps/$app/overlays/$env; then
              echo "::error::Failed to deploy $app to $env"
              return 1
            fi
            
            # Find all deployments in the namespace to check status
            echo "Checking deployments in namespace $app-$env..."
            DEPLOYMENTS=$(kubectl get deployments -n $app-$env -o name 2>/dev/null || echo "")
            
            if [ -z "$DEPLOYMENTS" ]; then
              echo "::warning::No deployments found for $app in namespace $app-$env"
              # Show other resources that might have been created
              echo "Resources created:"
              kubectl get all -n $app-$env
              return 0
            fi
            
            # Wait for each deployment to roll out
            for DEPLOYMENT in $DEPLOYMENTS; do
              echo "Waiting for rollout of $DEPLOYMENT..."
              if ! kubectl rollout status $DEPLOYMENT -n $app-$env --timeout=300s; then
                echo "::error::Rollout for $DEPLOYMENT failed or timed out"
                kubectl get pods -n $app-$env -l app=$app
                return 1
              fi
            done
            
            echo "✅ $app successfully deployed to $env"
            return 0
          }
          
          # Deploy either specific app or all apps
          if [ -n "$APP" ]; then
            # Deploy specific app
            if ! deploy_app "$APP" "${ENV}"; then
              echo "::error::Deployment of $APP failed"
              exit 1
            fi
          else
            # Deploy all apps
            for APP_DIR in apps/*/; do
              APP=$(basename $APP_DIR)
              if ! deploy_app "$APP" "${ENV}"; then
                FAILED_APPS="$FAILED_APPS $APP"
                echo "::warning::Failed to deploy $APP, continuing with others"
              fi
            done
            
            # Report any failures
            if [ -n "$FAILED_APPS" ]; then
              echo "::error::The following applications failed to deploy:$FAILED_APPS"
              exit 1
            else
              echo "✅ All applications successfully deployed to ${ENV}"
            fi
          fi
      
      - name: Cleanup
        if: always()
        run: |
          # Nothing to clean up when using temporary files
          # They're automatically removed when the workflow finishes