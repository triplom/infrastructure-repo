name: Build, Test and Deploy
on:
  push:
    branches: [main, 'feature/**']
  pull_request:
    branches: [main]
env:
  APP_NAME: app1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/app1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          cd src/app1
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          cd src/app1
          pytest --cov=./ --cov-report=xml || echo "Tests failed but continuing"
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./src/app1/coverage.xml
          fail_ci_if_error: false
  
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.image-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./src/app1
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Extract image tag
        id: image-tag
        if: github.event_name != 'pull_request'
        run: |
          PRIMARY_TAG=$(echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n' | head -n 1)
          echo "IMAGE_TAG=${PRIMARY_TAG}" >> $GITHUB_OUTPUT
          echo "Using image tag: ${PRIMARY_TAG}"
  
  update-manifest:
    needs: build
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Update deployment manifest
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: |
          echo "Updating deployment manifest with image: $IMAGE_TAG"
          
          if [ -z "$IMAGE_TAG" ]; then
            echo "Error: No image tag provided"
            exit 1
          fi
          
          # Update image tag in app1 base deployment with more robust pattern matching
          sed -i -E "s|image: .*/(${{ env.APP_NAME }}):.*|image: $IMAGE_TAG|" apps/${{ env.APP_NAME }}/base/deployment.yaml
          
          # Verify the change
          grep -A 2 "image:" apps/${{ env.APP_NAME }}/base/deployment.yaml
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update ${{ env.APP_NAME }} image to ${{ needs.build.outputs.image_tag }}"
          title: "Update ${{ env.APP_NAME }} deployment image"
          body: |
            This PR updates the ${{ env.APP_NAME }} deployment image to the latest version.
            
            Auto-generated by GitHub Actions CI workflow.
          branch: update-app-image
          base: main
          delete-branch: true