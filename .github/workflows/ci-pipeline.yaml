name: CI Pipeline

on:
  push:
    branches: [main, 'feature/**']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - app1
          - app2
          - k8s-web-app-php
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - promote

env:
  REGISTRY: ghcr.io/triplom

jobs:
  detect-changes:
    name: Detect Changed Applications
    runs-on: ubuntu-latest
    outputs:
      app1_changed: ${{ steps.changes.outputs.app1 }}
      app2_changed: ${{ steps.changes.outputs.app2 }}
      k8s_web_app_php_changed: ${{ steps.changes.outputs.k8s-web-app-php }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            app1:
              - 'apps/app1/**'
            app2:
              - 'apps/app2/**'
            k8s-web-app-php:
              - 'k8s/**'
              - 'src/**'
              - 'docker/**'
              - 'composer.json'
              - 'composer.lock'

      - name: Set build matrix
        id: set-matrix
        run: |
          matrix="[]"
          
          # For manual dispatch, use the selected component
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.component }}" == "all" ]]; then
              matrix='["app1", "app2", "k8s-web-app-php"]'
            else
              matrix='["${{ github.event.inputs.component }}"]'
            fi
          else
            # For push/PR, only build changed components
            apps=()
            if [[ "${{ steps.changes.outputs.app1 }}" == "true" ]]; then
              apps+=("app1")
            fi
            if [[ "${{ steps.changes.outputs.app2 }}" == "true" ]]; then
              apps+=("app2")
            fi
            if [[ "${{ steps.changes.outputs.k8s-web-app-php }}" == "true" ]]; then
              apps+=("k8s-web-app-php")
            fi
            
            if [[ ${#apps[@]} -gt 0 ]]; then
              matrix=$(printf '%s\n' "${apps[@]}" | jq -R . | jq -s .)
            fi
          fi
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Build matrix: $matrix"

  test:
    name: Test Applications
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test app1
        if: matrix.app == 'app1'
        run: |
          cd apps/app1
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install pytest pytest-cov
            pytest --cov=./ --cov-report=xml || echo "Tests failed but continuing"
          else
            echo "No requirements.txt found for app1"
          fi

      - name: Test app2
        if: matrix.app == 'app2'
        run: |
          cd apps/app2
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install pytest pytest-cov
            pytest --cov=./ --cov-report=xml || echo "Tests failed but continuing"
          elif [ -f package.json ]; then
            npm install
            npm test || echo "Tests failed but continuing"
          else
            echo "No test configuration found for app2"
          fi

      - name: Test k8s-web-app-php
        if: matrix.app == 'k8s-web-app-php'
        run: |
          if [ -f composer.json ]; then
            # Install PHP and Composer
            sudo apt-get update
            sudo apt-get install -y php php-cli php-mbstring php-xml php-zip unzip
            
            # Install Composer
            curl -sS https://getcomposer.org/installer | php
            sudo mv composer.phar /usr/local/bin/composer
            
            # Install dependencies and run tests
            composer install --no-dev --optimize-autoloader
            
            # Run PHPUnit tests if available
            if [ -f vendor/bin/phpunit ]; then
              vendor/bin/phpunit || echo "Tests failed but continuing"
            elif [ -f bin/phpunit ]; then
              bin/phpunit || echo "Tests failed but continuing"
            else
              echo "No PHPUnit configuration found"
            fi
          else
            echo "No composer.json found for k8s-web-app-php"
          fi

  build:
    name: Build and Push Images
    needs: [detect-changes, test]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.matrix != '[]'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    outputs:
      app1_image: ${{ steps.app1-output.outputs.image }}
      app2_image: ${{ steps.app2-output.outputs.image }}
      k8s_web_app_php_image: ${{ steps.k8s-web-app-php-output.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push app1
        if: matrix.app == 'app1'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/app1
          push: true
          tags: |
            ${{ env.REGISTRY }}/app1:${{ github.sha }}
            ${{ env.REGISTRY }}/app1:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push app2
        if: matrix.app == 'app2'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/app2
          push: true
          tags: |
            ${{ env.REGISTRY }}/app2:${{ github.sha }}
            ${{ env.REGISTRY }}/app2:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push k8s-web-app-php (PHP-FPM)
        if: matrix.app == 'k8s-web-app-php'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/php-fpm/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/k8s-web-app-php/php-fpm:${{ github.sha }}
            ${{ env.REGISTRY }}/k8s-web-app-php/php-fpm:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push k8s-web-app-php (Nginx)
        if: matrix.app == 'k8s-web-app-php'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/nginx/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/k8s-web-app-php/nginx:${{ github.sha }}
            ${{ env.REGISTRY }}/k8s-web-app-php/nginx:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set app1 output
        if: matrix.app == 'app1'
        id: app1-output
        run: echo "image=${{ env.REGISTRY }}/app1:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set app2 output
        if: matrix.app == 'app2'
        id: app2-output
        run: echo "image=${{ env.REGISTRY }}/app2:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Set k8s-web-app-php output
        if: matrix.app == 'k8s-web-app-php'
        id: k8s-web-app-php-output
        run: echo "image=${{ env.REGISTRY }}/k8s-web-app-php:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Environment
    needs: [detect-changes, build]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.matrix != '[]' && 
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') &&
      (github.event.inputs.action != 'promote' || github.event.inputs.action == '')
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Trigger deployment for app1
        if: matrix.app == 'app1'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.INFRA_REPO_PAT }}
          repository: triplom/infrastructure-repo
          event-type: app-deployment-request
          client-payload: |
            {
              "app_name": "app1",
              "repository": "${{ github.repository }}",
              "ref": "${{ github.ref }}",
              "version": "${{ github.sha }}",
              "environment": "${{ env.ENVIRONMENT }}",
              "triggered_by": "${{ github.actor }}",
              "commit_sha": "${{ github.sha }}",
              "workflow_run_id": "${{ github.run_id }}"
            }

      - name: Trigger deployment for app2
        if: matrix.app == 'app2'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.INFRA_REPO_PAT }}
          repository: triplom/infrastructure-repo
          event-type: app-deployment-request
          client-payload: |
            {
              "app_name": "app2",
              "repository": "${{ github.repository }}",
              "ref": "${{ github.ref }}",
              "version": "${{ github.sha }}",
              "environment": "${{ env.ENVIRONMENT }}",
              "triggered_by": "${{ github.actor }}",
              "commit_sha": "${{ github.sha }}",
              "workflow_run_id": "${{ github.run_id }}"
            }

      - name: Trigger deployment for k8s-web-app-php
        if: matrix.app == 'k8s-web-app-php'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.INFRA_REPO_PAT }}
          repository: triplom/infrastructure-repo
          event-type: app-deployment-request
          client-payload: |
            {
              "app_name": "k8s-web-app-php",
              "repository": "${{ github.repository }}",
              "ref": "${{ github.ref }}",
              "version": "${{ github.sha }}",
              "environment": "${{ env.ENVIRONMENT }}",
              "triggered_by": "${{ github.actor }}",
              "commit_sha": "${{ github.sha }}",
              "workflow_run_id": "${{ github.run_id }}"
            }

  promote:
    name: Promote Between Environments
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'promote'
    env:
      COMPONENT: ${{ github.event.inputs.component }}
      TARGET_ENV: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout infrastructure repo
        uses: actions/checkout@v4
        with:
          repository: triplom/infrastructure-repo
          token: ${{ secrets.INFRA_REPO_PAT }}
          path: infrastructure-repo

      - name: Promote applications
        run: |
          cd infrastructure-repo
          
          # Determine source environment for promotion
          case "${{ env.TARGET_ENV }}" in
            "qa")
              SOURCE_ENV="dev"
              SOURCE_CLUSTER="kind-dev-cluster"
              TARGET_CLUSTER="kind-qa-cluster"
              ;;
            "prod")
              SOURCE_ENV="qa"
              SOURCE_CLUSTER="kind-qa-cluster"
              TARGET_CLUSTER="kind-prod-cluster"
              ;;
            *)
              echo "::error::Invalid promotion target. Can only promote to 'qa' or 'prod'"
              echo "::error::Promotion flow: dev → qa → prod"
              echo "::error::Received target environment: ${{ env.TARGET_ENV }}"
              exit 1
              ;;
          esac
          
          echo "🚀 Promoting from $SOURCE_ENV (${SOURCE_CLUSTER}) to ${{ env.TARGET_ENV }} (${TARGET_CLUSTER})"
          
          # Function to promote a single app
          promote_app() {
            local app_name=$1
            echo "📦 Promoting $app_name from $SOURCE_ENV to ${{ env.TARGET_ENV }}"
            
            # Check if app exists in infrastructure repo
            if [ ! -d "apps/$app_name" ]; then
              echo "⚠️  App $app_name not found in infrastructure repo, skipping"
              return 0
            fi
            
            # Check if source environment exists
            if [ ! -f "apps/$app_name/overlays/$SOURCE_ENV/kustomization.yaml" ]; then
              echo "⚠️  Source environment $SOURCE_ENV not found for $app_name, skipping"
              return 0
            fi
            
            # Check if target environment exists
            if [ ! -f "apps/$app_name/overlays/${{ env.TARGET_ENV }}/kustomization.yaml" ]; then
              echo "⚠️  Target environment ${{ env.TARGET_ENV }} not found for $app_name, skipping"
              return 0
            fi
            
            # Extract current image tags from source environment
            local source_images=""
            source_images=$(grep -A 20 "images:" "apps/$app_name/overlays/$SOURCE_ENV/kustomization.yaml" | grep "newTag:" | sed 's/.*newTag: *//' | head -10 || echo "")
            
            if [ -z "$source_images" ]; then
              echo "⚠️  No image tags found for $app_name in $SOURCE_ENV environment"
              echo "📋 Source kustomization content:"
              cat "apps/$app_name/overlays/$SOURCE_ENV/kustomization.yaml" || echo "File not readable"
              return 0
            fi
            
            echo "📋 Found image tags in $SOURCE_ENV:"
            echo "$source_images"
            
            # Update target environment with source environment's image tags
            echo "🔄 Updating $app_name in ${{ env.TARGET_ENV }} environment"
            cd "apps/$app_name/overlays/${{ env.TARGET_ENV }}"
            
            # Extract image names and tags from source
            while IFS= read -r tag; do
              if [ -n "$tag" ] && [ "$tag" != "latest" ]; then
                echo "  📝 Setting image tag: $tag"
                # For k8s-web-app-php, handle multiple images
                if [[ "$app_name" == "k8s-web-app-php" ]]; then
                  kustomize edit set image "php-fpm=ghcr.io/triplom/k8s-web-app-php/php-fpm:$tag" 2>/dev/null || true
                  kustomize edit set image "nginx=ghcr.io/triplom/k8s-web-app-php/nginx:$tag" 2>/dev/null || true
                  # Also handle the full image names if they exist
                  kustomize edit set image "ghcr.io/triplom/k8s-web-app-php/php-fpm=ghcr.io/triplom/k8s-web-app-php/php-fpm:$tag" 2>/dev/null || true
                  kustomize edit set image "ghcr.io/triplom/k8s-web-app-php/nginx=ghcr.io/triplom/k8s-web-app-php/nginx:$tag" 2>/dev/null || true
                else
                  # For app1 and app2
                  kustomize edit set image "$app_name=ghcr.io/triplom/$app_name:$tag" 2>/dev/null || true
                  kustomize edit set image "ghcr.io/triplom/$app_name=ghcr.io/triplom/$app_name:$tag" 2>/dev/null || true
                fi
              fi
            done <<< "$source_images"
            
            cd - > /dev/null
            echo "✅ Updated $app_name in ${{ env.TARGET_ENV }} environment"
            
            # Show what was updated
            echo "📄 Updated kustomization.yaml:"
            cat "apps/$app_name/overlays/${{ env.TARGET_ENV }}/kustomization.yaml"
          }
          
          # Promote selected component(s)
          if [[ "${{ env.COMPONENT }}" == "all" ]]; then
            echo "🔄 Promoting all applications"
            promote_app "app1"
            promote_app "app2"
            promote_app "k8s-web-app-php"
          else
            echo "🔄 Promoting specific component: ${{ env.COMPONENT }}"
            promote_app "${{ env.COMPONENT }}"
          fi
          
          # Show what files were changed
          echo "📋 Files changed:"
          git status --porcelain
          
          # Commit and push changes
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
          else
            git commit -m "🚀 Promote ${{ env.COMPONENT }} from $SOURCE_ENV to ${{ env.TARGET_ENV }} (${SOURCE_CLUSTER} → ${TARGET_CLUSTER})"
            git push
            echo "✅ Promotion completed successfully"
          fi

      - name: Trigger deployment after promotion
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.INFRA_REPO_PAT }}
          repository: triplom/infrastructure-repo
          event-type: app-deployment-request
          client-payload: |
            {
              "app_name": "${{ env.COMPONENT }}",
              "repository": "triplom/infrastructure-repo",
              "ref": "refs/heads/main",
              "version": "promoted",
              "environment": "${{ env.TARGET_ENV }}",
              "cluster": "kind-${{ env.TARGET_ENV }}-cluster",
              "triggered_by": "${{ github.actor }}",
              "commit_sha": "promotion",
              "workflow_run_id": "${{ github.run_id }}",
              "promotion": true
            }

  notification:
    name: Send Notifications
    needs: [detect-changes, build, deploy, promote]
    runs-on: ubuntu-latest
    if: always() && needs.detect-changes.outputs.matrix != '[]'
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.action }}" == "promote" ]]; then
            echo "🚀 Promotion workflow completed"
            echo "• Component: ${{ github.event.inputs.component }}"
            echo "• Target Environment: ${{ github.event.inputs.environment }}"
            echo "• Status: ${{ job.status }}"
          else
            echo "🏗️  Build and deployment workflow completed"
            echo "• Components: ${{ needs.detect-changes.outputs.matrix }}"
            echo "• Environment: ${{ github.event.inputs.environment || 'dev' }}"
            echo "• Status: ${{ job.status }}"
          fi