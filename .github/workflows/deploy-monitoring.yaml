name: Deploy Monitoring Stack
on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/monitoring/**'
      - '.github/workflows/deploy-monitoring.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

jobs:
  deploy:
    name: Deploy Monitoring
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.3'
      
      - name: Setup yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version
      
      - name: Setup Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=./kubeconfig" >> $GITHUB_ENV
          # Verify kubeconfig is valid
          kubectl config get-contexts || {
            echo "::error::Invalid kubeconfig file"
            exit 1
          }
      
      - name: Check Kubernetes connectivity
        run: |
          kubectl cluster-info --request-timeout=30s || echo "Cannot connect directly to API server, will use --validate=false"
      
      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
      
      - name: Create namespace
        run: |
          kubectl apply --validate=false -f infrastructure/monitoring/base/namespace.yaml || {
            echo "::error::Failed to create namespace"
            exit 1
          }
      
      - name: Deploy kube-prometheus-stack
        id: deploy
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "Deploying monitoring stack to $ENV environment"
          
          # Prepare values file
          cp infrastructure/monitoring/base/helm-values.yaml values-$ENV.yaml
          
          # Apply any environment-specific patches if they exist
          if [ -f "infrastructure/monitoring/overlays/$ENV/values-patch.yaml" ]; then
            echo "Applying $ENV-specific values patch"
            if ! yq eval-all 'select(fileIndex==0) * select(fileIndex==1)' values-$ENV.yaml "infrastructure/monitoring/overlays/$ENV/values-patch.yaml" > values-$ENV-merged.yaml; then
              echo "::error::Failed to merge values files"
              exit 1
            fi
            mv values-$ENV-merged.yaml values-$ENV.yaml
          fi
          
          # Deploy using Helm with atomic to ensure rollback on failure
          if ! helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --values values-$ENV.yaml \
            --atomic \
            --timeout 15m; then
            echo "::error::Helm deployment failed"
            exit 1
          fi
          
          # Apply additional Prometheus rules with validation disabled
          if ! kubectl apply --validate=false -f infrastructure/monitoring/base/prometheus-rules.yaml; then
            echo "::warning::Failed to apply prometheus rules, but continuing"
          fi
      
      - name: Verify deployment
        if: success()
        run: |
          echo "Verifying monitoring deployments..."
          
          # Check Prometheus
          if ! kubectl -n monitoring wait --for=condition=available --timeout=300s deployment/kube-prometheus-stack-prometheus 2>/dev/null; then
            echo "::warning::Prometheus deployment not found or not ready"
            kubectl -n monitoring get deployments -l "app=prometheus"
          else
            echo "✅ Prometheus is ready"
          fi
          
          # Check Grafana
          if ! kubectl -n monitoring wait --for=condition=available --timeout=300s deployment/kube-prometheus-stack-grafana 2>/dev/null; then
            echo "::warning::Grafana deployment not found or not ready"
            kubectl -n monitoring get deployments -l "app=grafana"
          else
            echo "✅ Grafana is ready"
          fi
          
          # Check AlertManager
          if ! kubectl -n monitoring wait --for=condition=available --timeout=300s deployment/kube-prometheus-stack-alertmanager 2>/dev/null; then
            echo "::warning::AlertManager deployment not found or not ready"
            kubectl -n monitoring get deployments -l "app=alertmanager"
          else
            echo "✅ AlertManager is ready"
          fi
          
          # List all monitoring resources
          echo "Deployed monitoring resources:"
          kubectl -n monitoring get all -l "release=kube-prometheus-stack"
      
      - name: Get access information
        if: success()
        run: |
          echo "Monitoring stack deployed successfully!"
          echo ""
          echo "Grafana can be accessed via port-forwarding:"
          echo "kubectl port-forward -n monitoring svc/kube-prometheus-stack-grafana 3000:80"
          echo ""
          echo "For direct pod access, use:"
          POD_NAME=$(kubectl --namespace monitoring get pod -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=kube-prometheus-stack" -oname 2>/dev/null || echo "pod/grafana-not-found")
          echo "kubectl --namespace monitoring port-forward $POD_NAME 3000"
          echo ""
          echo "Prometheus can be accessed via port-forwarding:"
          echo "kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus 9090:9090"
      
      - name: Cleanup
        if: always()
        run: |
          # Remove sensitive files
          rm -f ./kubeconfig values-*.yaml