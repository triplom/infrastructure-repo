name: Deploy Infrastructure
on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '.github/workflows/deploy-infrastructure.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - cert-manager
          - ingress-nginx

jobs:
  validate-prerequisites:
    name: Validate Prerequisites
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      components: ${{ steps.set-components.outputs.components }}
    steps:
      - name: Set Environment
        id: set-env
        run: echo "environment=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_OUTPUT
      
      - name: Set Components to Deploy
        id: set-components
        run: |
          if [ "${{ github.event.inputs.component }}" = "all" ] || [ "${{ github.event.inputs.component }}" = "" ]; then
            echo "components=cert-manager ingress-nginx" >> $GITHUB_OUTPUT
          else
            echo "components=${{ github.event.inputs.component }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Validate Infrastructure Files
        run: |
          for component in ${{ steps.set-components.outputs.components }}; do
            if [ ! -d "infrastructure/$component" ]; then
              echo "::error::Component directory 'infrastructure/$component' not found"
              exit 1
            fi
            
            if [ ! -f "infrastructure/$component/base/deploy.sh" ]; then
              echo "::error::Deployment script for '$component' not found at infrastructure/$component/base/deploy.sh"
              exit 1
            fi
            
            # Validate the script is executable
            chmod +x "infrastructure/$component/base/deploy.sh"
            
            # Basic syntax check of shell script
            bash -n "infrastructure/$component/base/deploy.sh" || {
              echo "::error::Shell script syntax error in infrastructure/$component/base/deploy.sh"
              exit 1
            }
          done
      
      - name: Validate Secret Existence
        env:
          ENV: ${{ steps.set-env.outputs.environment }}
        run: |
          # Dynamically check for the correct secret based on environment
          SECRET_NAME="KUBECONFIG_${ENV^^}"
          if [ "$ENV" = "dev" ] && [ -z "${{ secrets.KUBECONFIG_DEV }}" ]; then
            echo "::error::${SECRET_NAME} secret is not set for environment $ENV"
            exit 1
          elif [ "$ENV" = "qa" ] && [ -z "${{ secrets.KUBECONFIG_QA }}" ]; then
            echo "::error::${SECRET_NAME} secret is not set for environment $ENV"
            exit 1
          elif [ "$ENV" = "prod" ] && [ -z "${{ secrets.KUBECONFIG_PROD }}" ]; then
            echo "::error::${SECRET_NAME} secret is not set for environment $ENV"
            exit 1
          else
            echo "${SECRET_NAME} secret confirmed for environment $ENV"
          fi

  deploy:
    name: Deploy Infrastructure
    needs: validate-prerequisites
    runs-on: self-hosted
    environment: ${{ needs.validate-prerequisites.outputs.environment }}
    
    steps:
      - name: Verify Self-Hosted Runner
        run: |
          echo "Self-hosted runner details:"
          echo "• Hostname: $(hostname)"
          echo "• Working directory: $(pwd)"
          echo "• User: $(whoami)"
          
          # Check for required tools
          for cmd in kubectl helm kustomize; do
            if ! command -v $cmd &> /dev/null; then
              echo "::warning::$cmd not found on this runner. Will attempt to install."
            else
              echo "✅ $cmd is available: $($cmd version --client 2>/dev/null || $cmd version 2>/dev/null || echo 'version unknown')"
            fi
          done
          
          # Display runner environment
          echo "Network connectivity:"
          ip addr | grep -E "inet .* scope global" || echo "No global IP found"
      
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: "4.5.7"
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.3'
      
      - name: Setup Kubeconfig
        id: kubeconfig
        env:
          ENV: ${{ needs.validate-prerequisites.outputs.environment }}          
          # Use environment-specific secrets
          KUBECONFIG_DEV: ${{ secrets.KUBECONFIG_DEV }}
          KUBECONFIG_QA: ${{ secrets.KUBECONFIG_QA }}
          KUBECONFIG_PROD: ${{ secrets.KUBECONFIG_PROD }}
        run: |
          # Select the appropriate KUBECONFIG based on environment
          if [ "$ENV" = "dev" ]; then
            KUBECONFIG_VALUE="$KUBECONFIG_DEV"
          elif [ "$ENV" = "qa" ]; then
            KUBECONFIG_VALUE="$KUBECONFIG_QA"
          elif [ "$ENV" = "prod" ]; then
            KUBECONFIG_VALUE="$KUBECONFIG_PROD"
          else
            echo "::error::Unknown environment: $ENV"
            exit 1
          fi
          
          # Create a temporary file with the secret content
          echo "$KUBECONFIG_VALUE" > encoded_config.txt
          
          # Check if content needs to be decoded or is already in proper format
          if grep -q "apiVersion: v1" encoded_config.txt; then
            echo "Content appears to be in raw YAML format, using as-is"
            cp encoded_config.txt kubeconfig
          else
            echo "Attempting to decode base64 content"
            # Try different decode options with error handling
            if ! base64 -d encoded_config.txt > kubeconfig 2>/dev/null; then
              if ! base64 --decode encoded_config.txt > kubeconfig 2>/dev/null; then
                # If both fail, try a different approach - some systems might have different flags
                cat encoded_config.txt | tr -d '[:space:]' > clean_encoded_config.txt
                if ! base64 -d clean_encoded_config.txt > kubeconfig 2>/dev/null; then
                  if ! base64 --decode clean_encoded_config.txt > kubeconfig 2>/dev/null; then
                    echo "::error::Failed to decode base64 content with standard options"
                    echo "Content format check (first 20 chars):"
                    head -c 20 encoded_config.txt | xxd -p
                    exit 1
                  fi
                fi
              fi
            fi
          fi
          
          # Clean up temporary files
          rm -f encoded_config.txt clean_encoded_config.txt 2>/dev/null || true
          
          # Set proper permissions
          chmod 600 kubeconfig
          
          # Verify kubeconfig content
          if [ ! -s kubeconfig ]; then
            echo "::error::Kubeconfig file is empty after processing"
            exit 1
          fi
          
          # Check if it looks like a valid kubeconfig
          if ! grep -q "apiVersion: v1" kubeconfig; then
            echo "::error::File doesn't appear to be a valid kubeconfig (missing 'apiVersion: v1')"
            echo "First 5 lines of file (sanitized):"
            head -n 5 kubeconfig | sed 's/\(password\|token\|client-key-data\|certificate\|auth-provider\): .*/\1: [REDACTED]/g'
            exit 1
          fi
          
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          
          # Display basic information (without showing secrets)
          echo "Examining kubeconfig structure:"
          kubectl config view --minify | grep -v -E "certificate|token"
          
          # The rest of your validation steps...
          echo "Available contexts:"
          kubectl config get-contexts
          
          if ! kubectl config get-contexts > /dev/null 2>&1; then
            echo "::error::Invalid KUBECONFIG file format"
            exit 1
          fi
          
          if ! kubectl cluster-info > /dev/null 2>&1; then
            echo "::error::Cannot connect to Kubernetes cluster. Cluster may be unreachable."
            exit 1
          fi
          
          CURRENT_CONTEXT=$(kubectl config current-context)
          echo "Using Kubernetes context: $CURRENT_CONTEXT"
          echo "current-context=$CURRENT_CONTEXT" >> $GITHUB_OUTPUT
      
      - name: Deploy Components
        env:
          ENV: ${{ needs.validate-prerequisites.outputs.environment }}
          KUBECTL_FLAGS: "--validate=false"
          KUBECTL_CONTEXT: ${{ steps.kubeconfig.outputs.current-context }}
        run: |
          # Create log directory
          mkdir -p logs
          
          for component in ${{ needs.validate-prerequisites.outputs.components }}; do
            echo "###################################################"
            echo "# Deploying $component to $ENV environment"
            echo "###################################################"
            
            component_dir="infrastructure/$component"
            deploy_script="$component_dir/base/deploy.sh"
            
            # Create log files for this component
            DEPLOY_LOG="logs/deployment-${component}-${ENV}.log"
            ERROR_LOG="logs/error-${component}-${ENV}.log"
            
            # Log start time
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting deployment of $component to $ENV" | tee -a "$DEPLOY_LOG"
            
            # Execute deployment with logging
            {
              export COMPONENT_ENV="$ENV"
              timeout 300s $deploy_script "$ENV" 2> >(tee -a "$ERROR_LOG" >&2)
            } | tee -a "$DEPLOY_LOG" || {
              EXIT_CODE=$?
              if [ $EXIT_CODE -eq 124 ]; then
                echo "::error::$component deployment timed out after 5 minutes" | tee -a "$ERROR_LOG"
              else
                echo "::error::$component deployment failed with exit code $EXIT_CODE" | tee -a "$ERROR_LOG"
              fi
              exit $EXIT_CODE
            }
            
            echo "Verifying $component deployment..."
            case "$component" in
              cert-manager)
                kubectl get deployment,pod -n cert-manager --selector=app.kubernetes.io/instance=cert-manager | tee -a "$DEPLOY_LOG"
                echo "Waiting for cert-manager to be available..." | tee -a "$DEPLOY_LOG"
                kubectl wait --for=condition=available --timeout=60s deployment/cert-manager -n cert-manager || true
                ;;
              ingress-nginx)
                kubectl get deployment,pod -n ingress-nginx --selector=app.kubernetes.io/instance=ingress-nginx | tee -a "$DEPLOY_LOG"
                echo "Waiting for ingress-nginx to be available..." | tee -a "$DEPLOY_LOG"
                kubectl wait --for=condition=available --timeout=60s deployment/ingress-nginx-controller -n ingress-nginx || true
                ;;
            esac
            
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $component deployment completed" | tee -a "$DEPLOY_LOG"
            echo "---------------------------------------------------"
          done
          
          echo "✅ All infrastructure components deployed successfully"
      
      - name: Upload Deployment Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-${{ needs.validate-prerequisites.outputs.environment }}
          path: logs/
          retention-days: 7
      
      - name: Cleanup
        if: always()
        run: |
          # Remove kubeconfig when done
          rm -f ./kubeconfig